[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "0.1.0"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "{{cookiecutter.python_version}}"

[tool.poetry.dev-dependencies]
ipympl = "{{cookiecutter.ipympl_version}}"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
skip_gitignore = true

{% if cookiecutter.notebook_handling == "jupytext" %}
[tool.jupytext]
formats = "ipynb,py:percent"
{% endif %}

[tool.poe.tasks]
_format_black = "black ."
_format_isort = "isort ."
format = { sequence = ["_format_black", "_format_isort"], help = "Format all files." }
lint = { cmd = "prospector", help = "Lint all files with Prospector." }
_check_black = "black . --check"
_check_isort = "isort . --check"
check = { sequence = ["_check_black", "_check_isort", "lint"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov={{cookiecutter.project_slug}} --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
version = { script = "_tasks:task_update_version()" }
conf_jupyter = { cmd = "python -m ipykernel install --user --name {{cookiecutter.project_slug}}", help = "Add a new jupyter kernel for the project." }
{% if cookiecutter.notebook_handling == "nbstripout" %}conf_nbstripout = { cmd = "nbstripout --install", help = "Enable the nbstripout pre commit hook."}
{% elif cookiecutter.notebook_handling == "jupytext" %}sync_notebooks = { cmd = "jupytext --sync 'experiments/**/notebooks/*.*py*' --set-kernel={{cookiecutter.project_slug}}", help = "Manually sync all notebooks with their jupytext counter part."}{% endif %}
remove_jupyter = { cmd = "jupyter kernelspec uninstall {{cookiecutter.project_slug}}", help = "Remove the project specific jupyter kernel."}
experiment = { script = "_tasks:task_new_experiment()", help = "Create the boilerplate for a new experiment in the experiment subfolder."}
